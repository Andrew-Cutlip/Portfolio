{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/snakeeye10/portfolio/pages/portfolio.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Container, CardDeck, Accordion } from 'react-bootstrap';\nimport ProjectCard from '../components/ProjectCard';\nvar bill = {\n  \"title\": \"Bill Splitter\",\n  \"lang\": \"Java, XML\",\n  \"text\": \"Basic bill splitter app that calculates how much each person should pay for a bill including tip options.\",\n  \"plat\": \"Android\",\n  \"key\": 0\n};\nvar shunt = {\n  \"title\": \"Shunting Yard algorithm Implementation\",\n  \"lang\": \"Scala\",\n  \"text\": \"Takes an expression as a string in infix notation and converts it to reverse polish notation then evaluates it.\",\n  \"key\": 1\n};\nvar phys = {\n  \"title\": \"Physics Engine\",\n  \"lang\": \"Scala\",\n  \"text\": \"Uses object-orientated programming to create a physics engine that models movement and collisions that could workin a simple game.\",\n  \"key\": 2\n};\nvar calc = {\n  \"title\": \"Calculator\",\n  \"lang\": \"Scala\",\n  \"plat\": \"GUI\",\n  \"text\": \"Uses a GUI and state design pattern to make a simple calculator that doesn't use any control flow. Reacts to button presses to perform arithmetic.\",\n  \"key\": 3\n};\nvar click = {\n  \"title\": \"Clicker\",\n  \"lang\": \"Scala\",\n  \"plat\": \"GUI\",\n  \"text\": \"A simple clicker game create with a gui, akka actors, and websockets to allow different instances of desktop/webapps to a server that responds to events. It stores user info in a SQL database\",\n  \"key\": 4\n};\nvar gene = {\n  \"title\": \"Genetic Algorithm\",\n  \"lang\": \"Scala\",\n  \"text\": \"Implements a generic genetic algorithm that can solve problems such as linear/polynomial regression. It generates random solutions, sorts them by how fit they are, keeps the best ones letting them redproduce with some randomness, all until a solution close to ideal is produced.\",\n  \"key\": 5\n};\nvar schoolList = [shunt, phys, calc, click, gene];\nvar schools = schoolList.map(function (school) {\n  return __jsx(ProjectCard, {\n    title: school.title,\n    lang: school.lang,\n    text: school.text,\n    event: school.key,\n    key: school.key,\n    cName: \"cardHeader\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  });\n});\n\nvar Portfolio = function Portfolio() {\n  return __jsx(Container, {\n    fluid: \"md\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Portfolio\"), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Personal Projects\"), __jsx(CardDeck, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, __jsx(ProjectCard, {\n    title: bill.title,\n    lang: bill.lang,\n    text: bill.text,\n    plat: bill.plat,\n    cName: \"cardHeader\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })), __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"School Projects\"), __jsx(Accordion, {\n    defaultActiveKey: \"1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, schools));\n};\n\n_c = Portfolio;\nexport default Portfolio;\n\nvar _c;\n\n$RefreshReg$(_c, \"Portfolio\");","map":{"version":3,"sources":["/home/snakeeye10/portfolio/pages/portfolio.tsx"],"names":["React","Container","CardDeck","Accordion","ProjectCard","bill","shunt","phys","calc","click","gene","schoolList","schools","map","school","title","lang","text","key","Portfolio","plat"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,SAA9B,QAA+C,iBAA/C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,IAAMC,IAAI,GAAG;AACT,WAAU,eADD;AAET,UAAS,WAFA;AAGT,UAAS,2GAHA;AAIT,UAAS,SAJA;AAKT,SAAQ;AALC,CAAb;AAQA,IAAMC,KAAK,GAAG;AACV,WAAU,wCADA;AAEV,UAAS,OAFC;AAGV,UAAS,iHAHC;AAIV,SAAQ;AAJE,CAAd;AAOA,IAAMC,IAAI,GAAG;AACT,WAAU,gBADD;AAET,UAAS,OAFA;AAGT,UAAU,oIAHD;AAIT,SAAQ;AAJC,CAAb;AAOA,IAAMC,IAAI,GAAG;AACT,WAAU,YADD;AAET,UAAS,OAFA;AAGT,UAAS,KAHA;AAIT,UAAU,oJAJD;AAKT,SAAQ;AALC,CAAb;AAQA,IAAMC,KAAK,GAAG;AACV,WAAU,SADA;AAEV,UAAS,OAFC;AAGV,UAAS,KAHC;AAIV,UAAU,iMAJA;AAKV,SAAQ;AALE,CAAd;AAQA,IAAMC,IAAI,GAAG;AACT,WAAU,mBADD;AAET,UAAS,OAFA;AAGT,UAAW,wRAHF;AAIT,SAAQ;AAJC,CAAb;AAOA,IAAMC,UAAU,GAAG,CACfL,KADe,EAEfC,IAFe,EAGfC,IAHe,EAIfC,KAJe,EAKfC,IALe,CAAnB;AAQA,IAAME,OAAO,GAAGD,UAAU,CAACE,GAAX,CAAe,UAACC,MAAD;AAAA,SAC3B,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEA,MAAM,CAACC,KAA3B;AAAkC,IAAA,IAAI,EAAED,MAAM,CAACE,IAA/C;AAAqD,IAAA,IAAI,EAAEF,MAAM,CAACG,IAAlE;AAAwE,IAAA,KAAK,EAAEH,MAAM,CAACI,GAAtF;AAA2F,IAAA,GAAG,EAAEJ,MAAM,CAACI,GAAvG;AAA4G,IAAA,KAAK,EAAC,YAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD2B;AAAA,CAAf,CAAhB;;AAIA,IAAMC,SAAsC,GAAG,SAAzCA,SAAyC,GAAM;AACjD,SACI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHJ,EAII,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEd,IAAI,CAACU,KAAzB;AAAgC,IAAA,IAAI,EAAEV,IAAI,CAACW,IAA3C;AAAiD,IAAA,IAAI,EAAEX,IAAI,CAACY,IAA5D;AAAkE,IAAA,IAAI,EAAEZ,IAAI,CAACe,IAA7E;AAAmF,IAAA,KAAK,EAAC,YAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAJJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARJ,EASI,MAAC,SAAD;AAAW,IAAA,gBAAgB,EAAC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,OADL,CATJ,CADJ;AAeH,CAhBD;;KAAMO,S;AAkBN,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport { Container, CardDeck, Accordion } from 'react-bootstrap';\nimport ProjectCard from '../components/ProjectCard';\n\nconst bill = {\n    \"title\" : \"Bill Splitter\",\n    \"lang\" : \"Java, XML\",\n    \"text\" : \"Basic bill splitter app that calculates how much each person should pay for a bill including tip options.\",\n    \"plat\" : \"Android\",\n    \"key\" : 0,\n}\n\nconst shunt = {\n    \"title\" : \"Shunting Yard algorithm Implementation\",\n    \"lang\" : \"Scala\",\n    \"text\" : \"Takes an expression as a string in infix notation and converts it to reverse polish notation then evaluates it.\",\n    \"key\" : 1,\n}\n\nconst phys = {\n    \"title\" : \"Physics Engine\",\n    \"lang\" : \"Scala\",\n    \"text\" :  \"Uses object-orientated programming to create a physics engine that models movement and collisions that could workin a simple game.\",\n    \"key\" : 2,\n}\n\nconst calc = {\n    \"title\" : \"Calculator\",\n    \"lang\" : \"Scala\",\n    \"plat\" : \"GUI\",\n    \"text\" :  \"Uses a GUI and state design pattern to make a simple calculator that doesn't use any control flow. Reacts to button presses to perform arithmetic.\",\n    \"key\" : 3,\n}\n\nconst click = {\n    \"title\" : \"Clicker\",\n    \"lang\" : \"Scala\",\n    \"plat\" : \"GUI\",\n    \"text\" :  \"A simple clicker game create with a gui, akka actors, and websockets to allow different instances of desktop/webapps to a server that responds to events. It stores user info in a SQL database\",\n    \"key\" : 4,\n}\n\nconst gene = {\n    \"title\" : \"Genetic Algorithm\",\n    \"lang\" : \"Scala\",\n    \"text\" :   \"Implements a generic genetic algorithm that can solve problems such as linear/polynomial regression. It generates random solutions, sorts them by how fit they are, keeps the best ones letting them redproduce with some randomness, all until a solution close to ideal is produced.\",\n    \"key\" : 5,\n}\n\nconst schoolList = [\n    shunt,\n    phys,\n    calc,\n    click,\n    gene,\n]\n\nconst schools = schoolList.map((school) =>\n    <ProjectCard title={school.title} lang={school.lang} text={school.text} event={school.key} key={school.key} cName=\"cardHeader\" />\n)\n\nconst Portfolio: React.FunctionComponent<{}> = () => {\n    return (\n        <Container fluid=\"md\">\n            <h1>Portfolio</h1>\n\n            <h2>Personal Projects</h2>\n            <CardDeck>\n            <ProjectCard title={bill.title} lang={bill.lang} text={bill.text} plat={bill.plat} cName=\"cardHeader\" />\n            </CardDeck>\n\n            <h2>School Projects</h2>\n            <Accordion defaultActiveKey=\"1\">\n                {schools}\n            </Accordion>\n        </Container>\n    )\n}\n\nexport default Portfolio;"]},"metadata":{},"sourceType":"module"}